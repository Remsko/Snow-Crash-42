#There is nothing on this level, so we have to break the only thing that left : getflag

#as expected, getflag is protected against ltrace, lets try with gdb

gdb getflag

# We put a breakpoint on main

b main
run

#eax est le registre qui enregistre le retour de fonction, on peut donc passer par dessus ptrace et modifie le registre eax
#As said before, eax store the return value of any function, so we can go trough ptrace by modifying eax right after the ptrace call

ni                                      // jusqu'a avoir passer ptrace
set $eax=0                              // pour passer le test eax eax qui correspond a cmp eax 0

#To have a better overview, we want to have a look on the assembly code

pdissas

# At the first sight, we can see that getflag is a huge program but one thing is very catchy : a cmp forest who seems like a switch case on a getuid output
#Let put a breakpoint right after the getuid call

b *0x08048b02
continue

#getflag return a different flag depending on the UID of the user who run this command

#all those cmp compare the return value of getuid with some raw value, which must be UIDs

#In another shell, lets retrieve flag14 UID

id flag14
>>> uid=3014(flag14) gid=3014(flag14) groups=3014(flag14),1001(flag)

# the hex value of 3014 is 0xBC6 which is exactly the same as the last value compared with eax, lets set eax

st $eax=0xBC6
continue

>>> Check flag.Here is your token : 7QiHafiNa3HVozsaXkawuYrTstxbpABHD8CPnHJ
[Inferior 1 (process 3580) exited normally]
Warning: not running

#Here it is, lets connect to flag14

su flag14
7QiHafiNa3HVozsaXkawuYrTstxbpABHD8CPnHJ

>>> Congratulation. Type getflag to get the key and send it to me the owner of this livecd :)

#The flag was also the password for flag14 

